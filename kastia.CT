<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="29">
  <CheatEntries>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Hacks"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <Color>00FF00</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"FMA"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
aobscan(FMA,75 1C 81 BC ? ? ? ? ? ? ? ? ? 0F 85 ? ? ? ? 83 7C ? ? ? 0F 85)
aobscan(N_LD,74 14 8B 11 8B 42 ? 53 53 53 53 53 53 53 53 68 EA ? ? ? FF D0 39 9E)
label(FMA1)
label(N_LD1)
registersymbol(FMA1)
registersymbol(N_LD1)
FMA:
FMA1:
db 73

N_LD:
N_LD1:
db EB

[disable]
FMA1:
db 75

N_LD1:
db 74

unregistersymbol(FMA1)
unregistersymbol(N_LD1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"SI - Cannonner"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Skill Injection + Mach ND

/*
12120011 (Blazing Extinction 4th job) Blaze Wizard Skill
12100029 (Ignition) Blaze Wizard
12121002 (Towering Inferno) Blaze Wizard
25100010 (Fox Spirits 2nd job) Shade Skill
61101100 (Impact Wave 2nd job) Kaiser
25100002 (Ground Pound (shockwave) 2nd job) Shade Skill
25110003 (Shockwave Punch (shockwave) 3rd job) Shade Skill
35121052 (Distortion Bomb, mechanic) turn down delay
142120030 (kinesis Mental Tempest Hyper Skill)
4321006 (Flying Assaulter - jump to activate) Dual Blade
4331000 (Bloody Storm) Dual Blade
4331006 (Chains of Hell) Dual Blade
24111006 (Rapier Wit Dash &amp; Damage) phantom
36110005 (Triangulation, works with FMA) Xenon
112001006 (Majestic Trumpet, works with FMA) Beast Tamer
31201010 (Demon Strike, auto-exceed)
101000101 (Air Riot) Zero: Beta
101000201 (Shadow Strike) Zero: Alpha
101001100 (Shadow Strike) Zero - both
#37110006
#37120022
#12121055 dragon blaze
*/

[enable]
label(GN_D)
label(h_1)
label(h_2)
label(h_3)
label(h_4)
label(h_5)
label(h_6)
registersymbol(GN_D)
registersymbol(h_1)
registersymbol(h_2)
registersymbol(h_3)
registersymbol(h_4)
registersymbol(h_5)
registersymbol(h_6)
aobscan(GND,75 2E 83 BD ? ? ? ? ? 75 25 8B 4D ? 51 8B 95 ? ? ? ? 52 8B 45 ?)
aobscan(h1,0F 84 ?? ?? ?? ?? 2B 9E ?? ?? ?? ?? 0F 88 ?? ?? ?? ?? A1 ?? ?? ?? ?? 85 C0)
aobscan(h2,0F 88 ?? ?? ?? ?? A1 ?? ?? ?? ?? 85 C0 74 ?? 8B 50 ?? 8D 48 ??)
aobscan(h3,0F 84 ?? ?? ?? ?? 8B 16 8B 42 ?? 8B CE FF D0 3D ?? ?? ?? ?? 74 ?? 3D ?? ?? ?? ?? 74 ?? 3D ?? ?? ?? ?? 74 ?? 3D ?? ?? ?? ?? 74 ?? 3D ?? ?? ?? ?? 75 ?? 8D 4C 24 ?? 51)
aobscan(h4,8B ?? ?? ?? ?? ?? 8B 44 24 ?? 6A ?? 6A ?? 6A ?? 6A ?? 8D 4C 24 ?? 51)
aobscan(h5,0F 87 ?? ?? ?? ?? 0F B6 ?? ?? ?? ?? ?? FF 24 ?? ?? ?? ?? ?? 84 DB 74 ?? 8B 8E ?? ?? ?? ?? 85 C9)
aobscan(h6,FF ? ? ? ? ? ? 84 ? 74 ? 8B ? ? ? ? ? 85 ? 0f 84 ? ? ? ? 8B ? ? ? 57 52)
aobscan(h7,81 BE ?? ?? ?? ?? ?? ?? ?? ?? 8B CE 75 ?? 8B 44 24 ?? 6A ??)

alloc(skill_id_hook,128)
label(skill_id_return)
alloc(delay,4)
define(skill_id, #5321000)

delay:
dw 0
h1:
h_1:
db 90 90 90 90 90 90
h2:
h_2:
db 90 90 90 90 90 90
h3:
h_3:
db 90 E9
h4:
h_4:
jmp skill_id_hook
nop
skill_id_return:
skill_id_hook:
inc [delay]
cmp dword ptr [delay], #6
jne skill_id_return
mov [delay], 0
mov edx,skill_id
jmp skill_id_return
h5:
h_5:
db 90 90 90 90 90 90
h6:
h_6:
jmp h7
dw 9090

GND:
GN_D:
db EB

[disable]
GN_D:
db 75
h_1:
db 0F 84 86 03 00 00
h_2:
db 0F 88 7A 03 00 00
h_3:
db 0F 84 CC 00 00 00
h_4:
mov edx,[esi+0001237C]
h_5:
db 0F 87 7F 01 00 00
h_6:
jmp dword ptr [ecx*4+01D247DC]
dealloc(skill_id_hook)
dealloc(delay)
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>46</Key>
              </Keys>
              <ID>0</ID>
              <ActivateSound>Activate</ActivateSound>
              <DeactivateSound>Deactivate</DeactivateSound>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Unlimited Attack"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
aobscan(Ultd_1,7E ? 83 ? ? 7D ? 8B ? ? 2B ? 3D)
label(Ultd1)
registersymbol(Ultd1)
Ultd_1:
Ultd1:
db EB

[disable]
Ultd1:
db 7E
unregistersymbol(Ultd1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Pet Loot (In progress)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]
label(pet_teleport_restore)
registersymbol(pet_teleport_restore)

alloc(pet_teleport_hook,128)
label(pet_teleport_return)

label(return_normal)

aobscan(pet_teleport_aob,8B 50 04 8B 00 ? ? 8D 4D)
aobscan(vecctrl_set_position_aob,8B ? 24 ? 8B 41 ? 8B 40 ? 56 8D 71 ? 8B 4C 24 10)

alloc(delay,4)
delay:
dw 0

pet_teleport_aob:
pet_teleport_restore:
jmp pet_teleport_hook
pet_teleport_return:

pet_teleport_hook:
inc [delay]
cmp dword ptr [delay], #100
mov [delay], 0

push esi
mov esi,eax
mov edx,[eax+04]
mov eax,[eax]
pushad

mov edi,[ebp+08]

lea ecx,[edi+04]
mov ebx,[edi+04]
mov ebx,[ebx+20]
call ebx

push [esi+04]
push [esi]
push 00
mov ecx,eax
call vecctrl_set_position_aob

popad
pop esi
jmp pet_teleport_return

return_normal:
mov edx,[eax+04]
mov eax,[eax]
jmp pet_teleport_return

[Disable]
pet_teleport_restore:
mov edx,[eax+04]
mov eax,[eax]

unregistersymbol(pet_teleport_restore)
dealloc(pet_teleport_hook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Physical No Delay"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
aobscan(MachNoDelay,75 2E 83 BD ? ? ? ? ? 75 25 8B 4D ? 51 8B 95 ? ? ? ? 52 8B 45 ?)
label(_MachNoDelay)
registersymbol(_MachNoDelay)
MachNoDelay:
_MachNoDelay:
db EB

[disable]
_MachNoDelay:
db 75
unregistersymbol(_MachNoDelay)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"CPU Hacks"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FFFF00</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>21</ID>
          <Description>"No MultiKill"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
0268A640:
ret

[disable]
0268A640: // String search Effect/BasicEff.img/MultiKill/ [First]
db 45
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Hide Damage (Testing)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
01052152: // No mob reaction, hitmarks or damage
ret 0074
db 90 90 90 90

[DISABLE]
01052152: //74 ? 8B 86 ? ? ? ? 3B ? ? ? 75 ? FF 15 [FUNCTION START]
db 6A FF 68
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"No damage (DC on change map/cc)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//GMS v180.1
//Full CPU Hack
//Updated by Blanc
define(H1,00FACA5E) //E8 ? ? ? ? 8D 45 4C C6 45 FC 15 50 8B CB C6 45 FC 0C
define(OC1,004BAD60)//Call of H1 (Follow)
define(H2,00FAAD51) //Address of second call below
define(OC2,004D9FC0)//Call of H2
define(H3,00FACA7B) //Address of third call below
define(OC3,008146B0)//Call of H3
define(H4,00FACAAB) //Address of fourth call below
define(OC4,029F8780)//Call of H4
define(H5,00FACAB7) //Address of fifth call below
define(OC5,023BD350)//Call of H5
define(H6,00FACABF) //Address of sixth call below
define(OC6,00F95420)//Call of H6
define(H7,00FACAC6) //Address of seventh call below
define(NoMobReaction,01052140) //Function start push -01: 83 C4 08 81 C2 ? ? ? ? 8B CE E8 (1st result) WAYYY Above
//backup: 74 ? 99 F7 7C ? ? 8B ? 0F AF ? 03 54 (delayShowDamage, function start push -01)
[Enable]
H1:
db 90 90 90 90 90

H2:
db 90 90 90 90 90

H3:
db 90 90 90 90 90

H4:
db 90 90 90 90 90

H6:
db 90 90 90 90 90

H7:
db 90 90

NoMobReaction:
ret 0074
nop
nop

[Disable]
H1:
call OC1

H2:
call OC2

H3:
call OC3

H4:
call OC4

H6:
call OC6

H7:
db FF D2

NoMobReaction:
push -01
push 0217FF78
mov eax,fs:[00000000]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Mob cheats"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>800040</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Magnus no balls"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
aobscan(NFO,55 8B ? 83 ? ? 6A ? 68 ? ? ? ? 64 ? ? ? ? ? 50 83 ? ? 53 55 56 57 A1 ? ? ? ? 33 ? 50 8D ? ? ? 64 ? ? ? ? ? 8B ? 33 ? 39 ? ? ? ? ? 0F 84 ? ? ? ? 8B ? ? ? ? ? 8B ? 3B ? 0F 84 ? ? ? ? )
registersymbol(NFO)

NFO:
db C3

[disable]
unregistersymbol(NFO)

NFO:
db 55
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Mob Disarm (DC when disable)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>Full Mob Disarm:


[Enable]
0105DEF0: // 75 ?? 8B CE E8 ?? ?? ?? ?? 8B CE E8 ?? ?? ?? ?? 8B CE E8 ?? ?? ?? ?? 8B CE E8 ?? ?? ?? ?? 8B ?? ?? ?? ?? ?? ??
jmp 0105E4CA // 8B 86 ?? ?? ?? ?? 85 C0 0F 84 ?? ?? ?? ?? 2B 45 ?? 0F 89 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 8D ?? ?? ?? ?? ?? ??
db 90 90 90 90


[Disable]
0105DEF0:
db 75 15 8B CE E8 94 A5 FE FF
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Mobs Suck Left"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
label(S_ML)
registersymbol(S_ML)
aobscan(SML,D9 C9 DC ? ? ? DC ? ? ? DC ? DD ? D8 D9 DF E0 F6 ? ? 7A ? DD ?)




SML:
S_ML:
db D8 D9


[DISABLE]


S_ML:
db D9 C9


unregistersymbol(S_ML)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"No Knockback"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]
013128EA:
db 00


[Disable]
013128EA: // 01 00 00 00 d8 d1 df e0
db 01
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Familiar"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Infinite MP boogie"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Needs Jr Boogie to be spawned to restore MP at set value
define(MP_VALUE,#1000) //Change this to pot at this defined mp value
[enable]
alloc(hook,128)
alloc(mpvalue_hook,128)
label(mp_return)
label(do_not_restore)
label(return)
label(restore)

registersymbol(restore_mp)
alloc(restore_mp,4)
restore_mp:
dd 0

019E473C:
jmp mpvalue_hook
nop
mp_return:

mpvalue_hook:
mov [esi+000001B4],ebp //Original Opcode
cmp ebp,MP_VALUE
jnl do_not_restore
inc [restore_mp]
jmp mp_return

do_not_restore:
mov [restore_mp],00
jmp mp_return

00BAB166:
jmp hook
nop
return:

hook:
cmp dword ptr [restore_mp] #1
jae restore
cmp [esi+00000160],eax
jmp return

restore:
mov [restore_mp],00
mov [esi+00000160],eax
jmp return


[disable]
dealloc(hook)
dealloc(mp_hook)

019E473C: //89 AE ? ? 00 00 E8 ? ? ? ? 8B ? ? ? C7 ? ? ? 01 00 00 00
mov [esi+000001B4],ebp

00BAB166: //39 86 ? ? 00 00 7F ? 8B CE E8
cmp [esi+00000160],eax
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Infinite Familiar"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Familiar won't attack; therefore, won't reduce it's vitality
//Credits to kevintjuh93 for providing the offset and to CJ. for making the script
//v179.1
[ENABLE]
00BAA6A0: // Familiar_TryDoingAttack
db 33 C0 C3

[DISABLE]
00BAA6A0: // 83 ? ? 56 8B F1 83 BE ? ? ? ? 00 0F 84 ? ? ? ? 8B 86
db 83 EC 68
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Jump Down Anywhere"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Jump Down Anywhere
//v179.1
[ENABLE]
01C233BE:
db EB

01C48BCC:
db 90 90

01D21218:
db EB

[DISABLE]
//backup: 83 ? ? 83 ? ? 0F 8F ? ? ? ? 57 E8 (last jnl in function)
01C233BE: // 7D ? 8B ? 8B ? ? 8D ? ? ? 50 8B CE [First Result]
db 7D

//backup: 8B ? F7 ? 1B ? 81 ? ? ? ? ? 81 ? ? ? ? ? E8 (last je in function)
01C48BCC: // 74 ?? 8B ?? C7 ?? ?? ?? ?? ?? ?? ?? ?? ?? E8 ?? ?? ?? ?? 85 C0 75 ?? 89 ?? ?? ?? ?? ?? EB ?? 8B ??
db 74 5B

01D21218: // 74 ? 3B ? ? ? 75 ? 8B ? ? ? 3B
db 74
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"No Delay Mining"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
label(H_1)
label(H_2)
label(H_3)
registersymbol(H_1)
registersymbol(H_2)
registersymbol(H_3)
aobscan(H1,7C ? 83 ? ? ? ? ? ? 7F ? 6A ? 6A ? 8B ? E8 ? ? ? ? 5F)
aobscan(H2,7F ? 6A ? 6A ? 8B ? E8 ? ? ? ? 5F 5E 83 ? ? C2 ? ? 8B ? ? ? ? ?)
aobscan(H3,75 13 55 ? ? ? ? 8B CB)


H1:
H_1:
db 90 90

H2:
H_2:
db EB

H3:
H_3:
db 90 90

[DISABLE]

H_1:
db 7C 42

H_2:
db 7F 13

H_3:
db 75 13

unregistersymbol(H_1)
unregistersymbol(H_2)
unregistersymbol(H_3)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
